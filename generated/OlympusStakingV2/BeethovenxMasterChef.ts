// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Harvest extends ethereum.Event {
  get params(): Harvest__Params {
    return new Harvest__Params(this);
  }
}

export class Harvest__Params {
  _event: Harvest;

  constructor(event: Harvest) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogPoolAddition extends ethereum.Event {
  get params(): LogPoolAddition__Params {
    return new LogPoolAddition__Params(this);
  }
}

export class LogPoolAddition__Params {
  _event: LogPoolAddition;

  constructor(event: LogPoolAddition) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get allocPoint(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lpToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get rewarder(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class LogSetPool extends ethereum.Event {
  get params(): LogSetPool__Params {
    return new LogSetPool__Params(this);
  }
}

export class LogSetPool__Params {
  _event: LogSetPool;

  constructor(event: LogSetPool) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get allocPoint(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rewarder(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get overwrite(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class LogUpdatePool extends ethereum.Event {
  get params(): LogUpdatePool__Params {
    return new LogUpdatePool__Params(this);
  }
}

export class LogUpdatePool__Params {
  _event: LogUpdatePool;

  constructor(event: LogUpdatePool) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lastRewardBlock(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lpSupply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get accBeetsPerShare(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetTreasuryAddress extends ethereum.Event {
  get params(): SetTreasuryAddress__Params {
    return new SetTreasuryAddress__Params(this);
  }
}

export class SetTreasuryAddress__Params {
  _event: SetTreasuryAddress;

  constructor(event: SetTreasuryAddress) {
    this._event = event;
  }

  get oldAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdateEmissionRate extends ethereum.Event {
  get params(): UpdateEmissionRate__Params {
    return new UpdateEmissionRate__Params(this);
  }
}

export class UpdateEmissionRate__Params {
  _event: UpdateEmissionRate;

  constructor(event: UpdateEmissionRate) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _beetsPerSec(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class BeethovenxMasterChef__poolInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class BeethovenxMasterChef__updatePoolResultPoolStruct extends ethereum.Tuple {
  get allocPoint(): BigInt {
    return this[0].toBigInt();
  }

  get lastRewardBlock(): BigInt {
    return this[1].toBigInt();
  }

  get accBeetsPerShare(): BigInt {
    return this[2].toBigInt();
  }
}

export class BeethovenxMasterChef__userInfoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class BeethovenxMasterChef extends ethereum.SmartContract {
  static bind(address: Address): BeethovenxMasterChef {
    return new BeethovenxMasterChef("BeethovenxMasterChef", address);
  }

  POOL_PERCENTAGE(): BigInt {
    let result = super.call(
      "POOL_PERCENTAGE",
      "POOL_PERCENTAGE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_POOL_PERCENTAGE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "POOL_PERCENTAGE",
      "POOL_PERCENTAGE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TREASURY_PERCENTAGE(): BigInt {
    let result = super.call(
      "TREASURY_PERCENTAGE",
      "TREASURY_PERCENTAGE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_TREASURY_PERCENTAGE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TREASURY_PERCENTAGE",
      "TREASURY_PERCENTAGE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  beets(): Address {
    let result = super.call("beets", "beets():(address)", []);

    return result[0].toAddress();
  }

  try_beets(): ethereum.CallResult<Address> {
    let result = super.tryCall("beets", "beets():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  beetsPerBlock(): BigInt {
    let result = super.call("beetsPerBlock", "beetsPerBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_beetsPerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "beetsPerBlock",
      "beetsPerBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lpTokens(param0: BigInt): Address {
    let result = super.call("lpTokens", "lpTokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_lpTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("lpTokens", "lpTokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingBeets(_pid: BigInt, _user: Address): BigInt {
    let result = super.call(
      "pendingBeets",
      "pendingBeets(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return result[0].toBigInt();
  }

  try_pendingBeets(_pid: BigInt, _user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingBeets",
      "pendingBeets(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolInfo(param0: BigInt): BeethovenxMasterChef__poolInfoResult {
    let result = super.call(
      "poolInfo",
      "poolInfo(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new BeethovenxMasterChef__poolInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_poolInfo(
    param0: BigInt
  ): ethereum.CallResult<BeethovenxMasterChef__poolInfoResult> {
    let result = super.tryCall(
      "poolInfo",
      "poolInfo(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BeethovenxMasterChef__poolInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  poolLength(): BigInt {
    let result = super.call("poolLength", "poolLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolLength", "poolLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewarder(param0: BigInt): Address {
    let result = super.call("rewarder", "rewarder(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_rewarder(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("rewarder", "rewarder(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  startBlock(): BigInt {
    let result = super.call("startBlock", "startBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startBlock", "startBlock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalAllocPoint(): BigInt {
    let result = super.call(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAllocPoint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasuryAddress(): Address {
    let result = super.call(
      "treasuryAddress",
      "treasuryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_treasuryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "treasuryAddress",
      "treasuryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  updatePool(_pid: BigInt): BeethovenxMasterChef__updatePoolResultPoolStruct {
    let result = super.call(
      "updatePool",
      "updatePool(uint256):((uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_pid)]
    );

    return changetype<BeethovenxMasterChef__updatePoolResultPoolStruct>(
      result[0].toTuple()
    );
  }

  try_updatePool(
    _pid: BigInt
  ): ethereum.CallResult<BeethovenxMasterChef__updatePoolResultPoolStruct> {
    let result = super.tryCall(
      "updatePool",
      "updatePool(uint256):((uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_pid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<BeethovenxMasterChef__updatePoolResultPoolStruct>(
        value[0].toTuple()
      )
    );
  }

  userInfo(
    param0: BigInt,
    param1: Address
  ): BeethovenxMasterChef__userInfoResult {
    let result = super.call(
      "userInfo",
      "userInfo(uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new BeethovenxMasterChef__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_userInfo(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BeethovenxMasterChef__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BeethovenxMasterChef__userInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _beets(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _treasuryAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _beetsPerBlock(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _startBlock(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCall extends ethereum.Call {
  get inputs(): AddCall__Inputs {
    return new AddCall__Inputs(this);
  }

  get outputs(): AddCall__Outputs {
    return new AddCall__Outputs(this);
  }
}

export class AddCall__Inputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }

  get _allocPoint(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lpToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _rewarder(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AddCall__Outputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class HarvestAllCall extends ethereum.Call {
  get inputs(): HarvestAllCall__Inputs {
    return new HarvestAllCall__Inputs(this);
  }

  get outputs(): HarvestAllCall__Outputs {
    return new HarvestAllCall__Outputs(this);
  }
}

export class HarvestAllCall__Inputs {
  _call: HarvestAllCall;

  constructor(call: HarvestAllCall) {
    this._call = call;
  }

  get _pids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class HarvestAllCall__Outputs {
  _call: HarvestAllCall;

  constructor(call: HarvestAllCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall extends ethereum.Call {
  get inputs(): MassUpdatePoolsCall__Inputs {
    return new MassUpdatePoolsCall__Inputs(this);
  }

  get outputs(): MassUpdatePoolsCall__Outputs {
    return new MassUpdatePoolsCall__Outputs(this);
  }
}

export class MassUpdatePoolsCall__Inputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }

  get pids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class MassUpdatePoolsCall__Outputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCall extends ethereum.Call {
  get inputs(): SetCall__Inputs {
    return new SetCall__Inputs(this);
  }

  get outputs(): SetCall__Outputs {
    return new SetCall__Outputs(this);
  }
}

export class SetCall__Inputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _allocPoint(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _rewarder(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get overwrite(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class SetCall__Outputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TreasuryCall extends ethereum.Call {
  get inputs(): TreasuryCall__Inputs {
    return new TreasuryCall__Inputs(this);
  }

  get outputs(): TreasuryCall__Outputs {
    return new TreasuryCall__Outputs(this);
  }
}

export class TreasuryCall__Inputs {
  _call: TreasuryCall;

  constructor(call: TreasuryCall) {
    this._call = call;
  }

  get _treasuryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TreasuryCall__Outputs {
  _call: TreasuryCall;

  constructor(call: TreasuryCall) {
    this._call = call;
  }
}

export class UpdateEmissionRateCall extends ethereum.Call {
  get inputs(): UpdateEmissionRateCall__Inputs {
    return new UpdateEmissionRateCall__Inputs(this);
  }

  get outputs(): UpdateEmissionRateCall__Outputs {
    return new UpdateEmissionRateCall__Outputs(this);
  }
}

export class UpdateEmissionRateCall__Inputs {
  _call: UpdateEmissionRateCall;

  constructor(call: UpdateEmissionRateCall) {
    this._call = call;
  }

  get _beetsPerBlock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateEmissionRateCall__Outputs {
  _call: UpdateEmissionRateCall;

  constructor(call: UpdateEmissionRateCall) {
    this._call = call;
  }
}

export class UpdatePoolCall extends ethereum.Call {
  get inputs(): UpdatePoolCall__Inputs {
    return new UpdatePoolCall__Inputs(this);
  }

  get outputs(): UpdatePoolCall__Outputs {
    return new UpdatePoolCall__Outputs(this);
  }
}

export class UpdatePoolCall__Inputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePoolCall__Outputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }

  get pool(): UpdatePoolCallPoolStruct {
    return changetype<UpdatePoolCallPoolStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class UpdatePoolCallPoolStruct extends ethereum.Tuple {
  get allocPoint(): BigInt {
    return this[0].toBigInt();
  }

  get lastRewardBlock(): BigInt {
    return this[1].toBigInt();
  }

  get accBeetsPerShare(): BigInt {
    return this[2].toBigInt();
  }
}

export class WithdrawAndHarvestCall extends ethereum.Call {
  get inputs(): WithdrawAndHarvestCall__Inputs {
    return new WithdrawAndHarvestCall__Inputs(this);
  }

  get outputs(): WithdrawAndHarvestCall__Outputs {
    return new WithdrawAndHarvestCall__Outputs(this);
  }
}

export class WithdrawAndHarvestCall__Inputs {
  _call: WithdrawAndHarvestCall;

  constructor(call: WithdrawAndHarvestCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawAndHarvestCall__Outputs {
  _call: WithdrawAndHarvestCall;

  constructor(call: WithdrawAndHarvestCall) {
    this._call = call;
  }
}
